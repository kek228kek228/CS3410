#testing addi, add, sub (table A)
#expected behavior: 
#x1: 000000005, x2: 000000009 
#x3: 00000000e, x4: ffffffffb 

addi x1, x0, 5
addi x2, x1, 4
addi x0, x0, 4
add x3, x2, x1
sub x4, x2, x3

#testing addi, add, sub (table A)
#x1: 000000005, x2: 000000009 
#x3: 00000000e, x4: ffffffffb 

addi x1, x0, 5
addi x2, x1, 4
addi x0, x0, 4
add x3, x2, x1
sub x4, x2, x3

#testing: and, andi, or, ori, xor, xori, 
# slt, slti (Logic) in table A
# Expected output: 
# x1: 000000003, x2: 000000002, x3: 000000002, x4: 000000003, x5: 000000001
# x6: 000000000, x7: 000000003, x8: 000000007, x9: 000000004, x10: 000000001
# x11: 000000000, x12: 000000001

addi x1, x0, 3
addi x2, x0, 2
and x3, x1, x2
or x4, x1, x2
xor x5, x1, x2
slt x6, x1, x2
andi x7, x1, 7
ori x8, x1, 7
xori x9, x1, 7
slti x10, x1, 4
sltu x11, x1, x2
sltiu x12, x1, 4

#testing: and, andi, or, ori, xor, xori, 
# slt, slti (Logic) in table A
# Expected output: 
# x1: 000000003, x2: 000000002, x3: 000000002, x4: 000000003, x5: 000000001
# x6: 000000000, x7: 000000003, x8: 000000007, x9: 000000004, x10: 000000001
# x11: 000000000, x12: 000000001

addi x1, x0, 3
addi x2, x0, 2
and x3, x1, x2
or x4, x1, x2
xor x5, x1, x2
slt x6, x1, x2
andi x7, x1, 7
ori x8, x1, 7
xori x9, x1, 7
slti x10, x1, 4
sltu x11, x1, x2
sltiu x12, x1, 4

# testing shifts: SRA, SRAI, SRL, SRLI, SLL, SLI (table A)
# also: testing registers not used before, i.e. 20+
# x20: 1010, x21: 1111
# expected outputs: x20: 00000000a, x21: 00000000f, x22: 000000003, x23: 000000050, x24: 000000001 
# x25: 000000a00, x26: 000000003, x27: 000000001

addi x20, x0, 10
addi x21, x20, 5
addi x22, x0, 3
sll x23, x20, x22 
srl x24, x21, x22
sra x25, x21, x22
slli x25, x20, 8
srli x26, x21, 2
srai x27, x21, 3 

 
# testing shifts: SRA, SRAI, SRL, SRLI, SLL, SLI (table A)
# also: testing registers not used before, i.e. 20+
# x20: 1010, x21: 1111
# expected outputs: x20: 00000000a, x21: 00000000f, x22: 000000003, x23: 000000050, x24: 000000001 
# x25: 000000a00, x26: 000000003, x27: 000000001

addi x20, x0, 10
addi x21, x20, 5
addi x22, x0, 3
sll x23, x20, x22 
srl x24, x21, x22
sra x25, x21, x22
slli x25, x20, 8
srli x26, x21, 2
srai x27, x21, 3


#auipc + lui test
#expected outputs: 
#x1: 000008000, x2: 000001000, x3: 000008008, x4: 00000800c

lui x1, 8
lui x2, 1
auipc x3, 8
auipc x4, 8


#testing sw, lw, lb
#expected behavior:
#In register file:
#x1: 12345678, x2: abcde123
#x3: 4       , x4: 12345678
#x5: abcde123,
#x6: 23, x7: e1, x8: cd, x9: ab
#In RAM:
#Word 0: 12345678
#Word 2: abcde123

LUI x1, 0x12345
ADDI x1, x1, 0x678
LUI x2, 0xabcde
ADDI x2, x2, 0x123
ADDI x3, x3, 4

SW x1, 0(x0)
SW x2, 4(x3)

LW x4, 0(x0)
LW x5, 4(x3)

LB x6, 4(x3)
LB x7, 5(x3)
LB x8, 6(x3)
LB x9, 7(x3)

#testing sb
#expected behavior:
#x11: a1b2c3d4
#x12: 000000d4
#x13: 0000d400
#x14: 00d40000
#x15: d4000000

LUI x11, 0xa1b2c
ADDI x11, x11, 0x3d4
ADDI x16, x0, 16

SB x11, 0(x16)
lw x12, 0(x16)
SB x11, 5(x16)
lw x13, 4(x16)
SB x11, 10(x16)
lw x14, 8(x16)
SB x11, 15(x16)
lw x15, 12(x16)

#hazard detection tests:
#expected behavior:
#x1: 2, x2: 3, x3: 5
#x4: 7, x5: 6, x6: d
#x7: 3, x8: f, x9: 5
#x10: 7

#forward from MW to A, forward from XM to B
ADDI x1, x0, 2
ADDI x2, x0, 3
ADD x3, x1, x2

#forward from XM to A, forward from MW to B
ADDI x4, x0, 7
ADDI x5, x0, 6
ADD x6, x5, x4

#data hazard detection
SW x2, 0(x0)
LW x7, 0(x0)
#should stall so x7 can update
ADDI x8, x7, 12
SW x3, 4(x0)
LW x9, 4(x0)
#should stall so x9 can update
ADD x10, x9, x1

#testing jal
#expected behavior:
#x18: PC+4
#x19: 00000000
#x20: PC+4
#x21: 00000005

JAL x18, 8
ADDI x19, x0, 10
JAL x20, 4
ADDI x21, x0, 5


